package cs361.battleships.models;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.List;

public class Board {

	@JsonProperty private List<Ship> boardShips;
	@JsonProperty private List<Result> attacks;
	private int length;
	private int width;

	/*
	DO NOT change the signature of this method. It is used by the grading scripts.
	 */
	public Board() {
		length = 10;
		width = 10;
	}

	public Board(int length,int width){
		this.length = length;
		this.width = width;
	}

	/*
	DO NOT change the signature of this method. It is used by the grading scripts.
	 */
	public boolean placeShip(Ship ship, int x, char y, boolean isVertical) {
		// TODO Implement


	if(isVertical) {
	    // When the placement is vertical, the column is fixed, so we need to check if the ship
        // span over the boundary of row number.
        if (x + ship.getLength() - 1 > width) {
            return false;
        } else {
            // In this loop, the ship would set itself with occupied square generated by the loop.
            for (int i = 0; i < ship.getLength(); i++) {
                ship.setOccupiedSquare(new Square(x + i, y));
            }
            // The new ship would be added to the board.
            boardShips.add(ship);
            return true;
        }
    }
	else{
	    //Implement the same kind of function for horizontal placement TODO
        }

		return false;
	}

	/*
	DO NOT change the signature of this method. It is used by the grading scripts.
	 */
	public Result attack(int x, char y) {
		//TODO Implement
		return null;
	}

	public List<Ship> getShips() {
		return boardShips;
	}

	public void setShips(List<Ship> ships) {
		this.boardShips = ships;
	}

	public List<Result> getAttacks() {
		return this.attacks;
	}

	public void setAttacks(List<Result> attacks) {
		this.attacks = attacks;
	}
}
